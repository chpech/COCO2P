# ==================================================================
# gapdoc.dtd - XML Document type definition for GAP documentation
# By Frank Lübeck and Max Neunhöffer
# ==================================================================

# $Id: gapdoc.dtd,v 1.17 2008/04/30 15:29:10 gap Exp $

# Note that this definition goes "bottom-up" because entities can only
# be used after their definition in the file.

# ==================================================================
# Some entities:
# ==================================================================

# The standard XML entities:

# The following were introduced in GAPDoc version < 1.0, it is no longer
# necessary to take care of LaTeX special characters
# (we keep the entities with simplified definitions for compatibility)

# ==================================================================
# Our predefined entities:
# ==================================================================

# and unicode math symbols

# double struck

# ==================================================================
# The following describes the "innermost" documentation text which 
# can occur at various places in the document like for example
# section headings. It does neither contain further sectioning 
# elements nor environments like Enums or Lists. 
# ==================================================================

InnerText =
  text
  | Alt
  | Emph
  | E
  | Par
  | P
  | Br
  | Keyword
  | K
  | Arg
  | A
  | Quoted
  | Q
  | Code
  | C
  | File
  | F
  | Button
  | B
  | Package
  | M
  | Math
  | Display
  | Example
  | Listing
  | Log
  | Verb
  | URL
  | Email
  | Homepage
  | Address
  | Cite
  | Label
  | Ref
  | Index
  | Ignore
Alt = element Alt { attlist.Alt, InnerText* }
# This is only to allow "Only" and
# "Not" attributes for normal text
attlist.Alt &=
  attribute Only { text }?,
  attribute Not { text }?
# The following elements declare a certain block of InnerText to
# have a certain property. They are non-terminal and can contain
# any InnerText recursively.
Emph = element Emph { attlist.Emph, InnerText* }
attlist.Emph &= empty
# Emphasize something
E = element E { attlist.E, InnerText* }
attlist.E &= empty
# the same as shortcut

# The following is an empty element marking a paragraph boundary.
Par = element Par { attlist.Par, empty }
attlist.Par &= empty
# this is intentionally empty!
P = element P { attlist.P, empty }
attlist.P &= empty
# the same as shortcut

# And here is an element for forcing a line break, not starting
# a new paragraph.
Br = element Br { attlist.Br, empty }
attlist.Br &= empty
# a forced line break

# The following elements mark a word or sentence to be of a certain
# kind, such that it can  be typeset differently. They are terminal
# elements that should only contain  character data. But we have to
# allow  Alt elements  for handling  special characters.  For these
# elements we introduce  a long name - which is  easy to remember -
# and a  short name - which  you may prefer because  of the shorter
# markup.
Keyword = element Keyword { attlist.Keyword, (text | Alt)* }
attlist.Keyword &= empty
# Keyword
K = element K { attlist.K, (text | Alt)* }
attlist.K &= empty
# Keyword (shortcut)
Arg = element Arg { attlist.Arg, (text | Alt)* }
attlist.Arg &= empty
# Argument
A = element A { attlist.A, (text | Alt)* }
attlist.A &= empty
# Argument (shortcut)
Code = element Code { attlist.Code, (text | Alt | A | Arg)* }
attlist.Code &= empty
# GAP code
C = element C { attlist.C, (text | Alt | A | Arg)* }
attlist.C &= empty
# GAP code (shortcut)
File = element File { attlist.File, (text | Alt)* }
attlist.File &= empty
# Filename
F = element F { attlist.F, (text | Alt)* }
attlist.F &= empty
# Filename (shortcut)
Button = element Button { attlist.Button, (text | Alt)* }
attlist.Button &= empty
# "Button" (also Menu, Key)
B = element B { attlist.B, (text | Alt)* }
attlist.B &= empty
# "Button" (shortcut)
Package = element Package { attlist.Package, (text | Alt)* }
attlist.Package &= empty
# A package name
Quoted = element Quoted { attlist.Quoted, InnerText* }
attlist.Quoted &= empty
# Quoted (in quotes) text
Q = element Q { attlist.Q, InnerText* }
attlist.Q &= empty
# Quoted text (shortcut)

# The following elements contain mathematical formulae. They are 
# terminal elements that contain character data in TeX notation.

# Math with well defined translation to text output
M = element M { attlist.M, (text | A | Arg | Alt)* }
attlist.M &= empty
# Normal TeX math mode formula
Math = element Math { attlist.Math, (text | A | Arg | Alt)* }
attlist.Math &= empty
# TeX displayed math mode formula
Display = element Display { attlist.Display, (text | A | Arg | Alt)* }
attlist.Display &= empty
# The  following  elements  contain  GAP related  text  like  code,
# session  logs or  examples. They  are all  terminal elements  and
# consist of character data which is normally typeset verbatim. The
# different  types  of  the  elements only  control  how  they  are
# treated.
Example = element Example { attlist.Example, text }
attlist.Example &= empty
# This is subject to the automatic 
# example checking mechanism
Log = element Log { attlist.Log, text }
attlist.Log &= empty
# This not
Listing = element Listing { attlist.Listing, text }
# This is just for code listings
attlist.Listing &= attribute Type { text }?
# a comment about the type of
# listed code, may appear in
# output

# One  further  verbatim element,  this is truely  verbatim without
# any processing and intended  for ASCII substitutes of complicated
# displayed formulae or tables.
Verb = element Verb { attlist.Verb, text }
attlist.Verb &= empty
# The following  elements are  for cross-referencing  purposes like
# URLs, citations,  references, and  the index. All  these elements
# are  terminal and  need special  methods  to make  up the  actual
# output during document generation.
URL = element URL { attlist.URL, (text | Alt | Link | LinkText)* }
# Link, LinkText
# variant for case where text needs further markup
attlist.URL &= attribute Text { text }?
# This is for output formats
# that have links like HTML
Link = element Link { attlist.Link, InnerText* }
attlist.Link &= empty
# the URL
LinkText = element LinkText { attlist.LinkText, InnerText* }
attlist.LinkText &= empty
# text for links, can contain markup

# The following two are actually URLs, but the element name determines
# the type.
Email = element Email { attlist.Email, (text | Alt | Link | LinkText)* }
attlist.Email &= empty
Homepage =
  element Homepage { attlist.Homepage, (text | Alt | Link | LinkText)* }
attlist.Homepage &= empty
# Those who still want to give postal addresses can use the following
# element. Use <Br/> for specifying typical line breaks
Address = element Address { attlist.Address, (text | Alt | Br)* }
attlist.Address &= empty
Cite = element Cite { attlist.Cite, empty }
attlist.Cite &=
  attribute Key { text },
  attribute Where { text }?
Label = element Label { attlist.Label, empty }
attlist.Label &= attribute Name { text }
Ref = element Ref { attlist.Ref, empty }
attlist.Ref &=
  attribute Func { text }?,
  attribute Oper { text }?,
  attribute Meth { text }?,
  attribute Filt { text }?,
  attribute Prop { text }?,
  attribute Attr { text }?,
  attribute Var { text }?,
  attribute Fam { text }?,
  attribute InfoClass { text }?,
  attribute Chap { text }?,
  attribute Sect { text }?,
  attribute Subsect { text }?,
  attribute Appendix { text }?,
  attribute Text { text }?,
  attribute Label { text }?,
  attribute BookName { text }?,
  attribute Style { "Text" | "Number" }?
# normally automatic

# Note that  only one attribute  of Ref is used  normally. BookName
# and  Style  can  be  specified in  addition  to  handle  external
# references and the typesetting style of the reference.

# For explicit index entries (Func and so on should cause an
# automatically generated index entry). Use the attributes Key,
# Subkey for sorting (simplified, without markup). The Subkey value
# also gets printed. Use the optional Subkey element if the printed
# version needs some markup.
Index = element Index { attlist.Index, (InnerText | Subkey)* }
attlist.Index &=
  attribute Key { text }?,
  attribute Subkey { text }?
Subkey = element Subkey { attlist.Subkey, InnerText* }
attlist.Subkey &= empty
# ==================================================================
# The following  describes the normal documentation  text which can
# occur  at various  places in  the document.  It does  not contain
# further sectioning elements. In addition to InnerText it can contain 
# environments like enumerations, lists, and such.
# ==================================================================
Text = InnerText | List | Enum | Table
Item = element Item { attlist.Item, Text* }
attlist.Item &= empty
Mark = element Mark { attlist.Mark, InnerText* }
attlist.Mark &= empty
BigMark = element BigMark { attlist.BigMark, InnerText* }
attlist.BigMark &= empty
List =
  element List {
    attlist.List,
    ((Mark, Item) | (BigMark, Item) | Item)+
  }
attlist.List &=
  attribute Only { text }?,
  attribute Not { text }?
Enum = element Enum { attlist.Enum, Item+ }
attlist.Enum &=
  attribute Only { text }?,
  attribute Not { text }?
Table = element Table { attlist.Table, Caption?, (Row | HorLine)+ }
attlist.Table &=
  attribute Label { text }?,
  attribute Only { text }?,
  attribute Not { text }?,
  attribute Align { text }
# A TeX tabular string

# We allow | and l,c,r, nothing else
Row = element Row { attlist.Row, Item+ }
attlist.Row &= empty
HorLine = element HorLine { attlist.HorLine, empty }
attlist.HorLine &= empty
Caption = element Caption { attlist.Caption, InnerText* }
attlist.Caption &= empty
# ==================================================================
# We start defining some things within the overall structure:
# ==================================================================

# The TitlePage consists of several sub-elements:
TitlePage =
  element TitlePage {
    attlist.TitlePage,
    Title,
    Subtitle?,
    Version?,
    TitleComment?,
    Author+,
    Date?,
    Address?,
    Abstract?,
    Copyright?,
    Acknowledgements?,
    Colophon?
  }
attlist.TitlePage &= empty
Title = element Title { attlist.Title, Text* }
attlist.Title &= empty
Subtitle = element Subtitle { attlist.Subtitle, Text* }
attlist.Subtitle &= empty
Version = element Version { attlist.Version, Text* }
attlist.Version &= empty
TitleComment = element TitleComment { attlist.TitleComment, Text* }
attlist.TitleComment &= empty
Author = element Author { attlist.Author, Text* }
attlist.Author &= empty
# There may be more than one Author!
Date = element Date { attlist.Date, Text* }
attlist.Date &= empty
Abstract = element Abstract { attlist.Abstract, Text* }
attlist.Abstract &= empty
Copyright = element Copyright { attlist.Copyright, Text* }
attlist.Copyright &= empty
Acknowledgements =
  element Acknowledgements { attlist.Acknowledgements, Text* }
attlist.Acknowledgements &= empty
Colophon = element Colophon { attlist.Colophon, Text* }
attlist.Colophon &= empty
# The following things just specify some information about the
# corresponding parts of the Book:
TableOfContents =
  element TableOfContents { attlist.TableOfContents, empty }
attlist.TableOfContents &= empty
Bibliography = element Bibliography { attlist.Bibliography, empty }
attlist.Bibliography &=
  attribute Databases { text },
  attribute Style { text }?
TheIndex = element TheIndex { attlist.TheIndex, empty }
attlist.TheIndex &= empty
# ==================================================================
# The Ignore element can be used everywhere to include further
# information in a GAPDoc document which is not intended for the 
# standard converters (e.g., source code, not yet finished stuff,
# and so on. This information can be extracted by special converter 
# routines, more precise information about the content of an Ignore
# element can be given by the "Remark" attribute.
# ==================================================================
Ignore =
  element Ignore {
    attlist.Ignore,
    (Text | Chapter | Section | Subsection | ManSection | Heading)*
  }
attlist.Ignore &= attribute Remark { text }?
# ==================================================================
# Now we go on with the overall structure by defining the sectioning 
# structure, which includes the Synopsis element: 
# ==================================================================
Subsection =
  element Subsection { attlist.Subsection, (Text | Heading)* }
attlist.Subsection &= attribute Label { text }?
# For reference purposes
ManSection =
  element ManSection {
    attlist.ManSection,
    Heading?,
    ((Func, Returns?)
     | (Oper, Returns?)
     | (Meth, Returns?)
     | (Filt, Returns?)
     | (Prop, Returns?)
     | (Attr, Returns?)
     | Var
     | Fam
     | InfoClass)+,
    Description
  }
attlist.ManSection &= attribute Label { text }?
# For reference purposes
Returns = element Returns { attlist.Returns, Text* }
attlist.Returns &= empty
Description = element Description { attlist.Description, Text* }
attlist.Description &= empty
# Note that  the ManSection element  is actually a  subsection with
# respect  to labelling,  referencing, and  counting of  sectioning
# elements.
Func = element Func { attlist.Func, empty }
attlist.Func &=
  attribute Name { text },
  attribute Label { text }?,
  attribute Arg { text },
  attribute Comm { text }?
# Note  that Arg  contains the  full list  of arguments,  including
# optional  parts,  which  are   denoted  by  square  brackets  [].
# Arguments   are  separated   by  whitespace,   commas  count   as
# whitespace.

# Note further that although Name and Label are  CDATA (and not ID)
# Label must make up a unique identifier.
Oper = element Oper { attlist.Oper, empty }
attlist.Oper &=
  attribute Name { text },
  attribute Label { text }?,
  attribute Arg { text },
  attribute Comm { text }?
Meth = element Meth { attlist.Meth, empty }
attlist.Meth &=
  attribute Name { text },
  attribute Label { text }?,
  attribute Arg { text },
  attribute Comm { text }?
Filt = element Filt { attlist.Filt, empty }
attlist.Filt &=
  attribute Name { text },
  attribute Label { text }?,
  attribute Arg { text }?,
  attribute Comm { text }?,
  attribute Type { text }?
Prop = element Prop { attlist.Prop, empty }
attlist.Prop &=
  attribute Name { text },
  attribute Label { text }?,
  attribute Arg { text },
  attribute Comm { text }?
Attr = element Attr { attlist.Attr, empty }
attlist.Attr &=
  attribute Name { text },
  attribute Label { text }?,
  attribute Arg { text },
  attribute Comm { text }?
Var = element Var { attlist.Var, empty }
attlist.Var &=
  attribute Name { text },
  attribute Label { text }?,
  attribute Comm { text }?
Fam = element Fam { attlist.Fam, empty }
attlist.Fam &=
  attribute Name { text },
  attribute Label { text }?,
  attribute Comm { text }?
InfoClass = element InfoClass { attlist.InfoClass, empty }
attlist.InfoClass &=
  attribute Name { text },
  attribute Label { text }?,
  attribute Comm { text }?
Heading = element Heading { attlist.Heading, InnerText* }
attlist.Heading &= empty
Section =
  element Section {
    attlist.Section, (Text | Heading | Subsection | ManSection)*
  }
attlist.Section &= attribute Label { text }?
# For reference purposes
Chapter =
  element Chapter { attlist.Chapter, (Text | Heading | Section)* }
attlist.Chapter &= attribute Label { text }?
# For reference purposes

# Note that  the entity %InnerText; is  documentation that contains
# neither sectioning  elements nor environments  like enumerations,
# but  only  formulae,  labels, references,  citations,  and  other
# terminal elements.
Appendix =
  element Appendix { attlist.Appendix, (Text | Heading | Section)* }
attlist.Appendix &= attribute Label { text }?
# For reference purposes

# Note that  an Appendix  is exactly  the same  as a  Chapter. They
# differ only in the numbering.

# ==================================================================
# At last we define the overall structure of a gapdoc Book:
# ==================================================================
Body = element Body { attlist.Body, (Text | Chapter | Section)* }
attlist.Body &= empty
Book =
  element Book {
    attlist.Book,
    TitlePage,
    TableOfContents?,
    Body,
    Appendix*,
    Bibliography?,
    TheIndex?
  }
attlist.Book &= attribute Name { text }
start = Book
# Note  that  the  entity  %Text; is  documentation  that  contains
# no  further sectioning  elements but  possibly environments  like
# enumerations,  and formulae,  labels, references,  and citations.

# ==============================================================
